%% Robot diferencial con lidar
% Robotica Movil - 2023 1c


close all
clear all

verMatlab= ver('MATLAB');   % en MATLAB2020a funciona bien, ajustado para R2016b, los demas a pelearla...

simular_ruido_lidar = true; %simula datos no validos del lidar real, probar si se la banca
use_roomba=false;  % false para desarrollar usando el simulador, true para conectarse al robot real

%% Roomba
if use_roomba   % si se usa el robot real, se inicializa la conexion    
    rosshutdown
    pause(1)
    ipaddress_core = '192.168.0.102';
    ipaddress_local = '192.168.0.101';  %mi ip en a red TurtleNet
    setenv('ROS_IP', '192.168.0.101');
    setenv('ROS_MASTER_URI', ['http://', ipaddress_core, ':11311']);
    rosinit(ipaddress_core,11311, 'NodeHost', ipaddress_local)
    pause(1)
    laserSub = rossubscriber('/scan');
    odomSub = rossubscriber('/odom');
    cmdPub = rospublisher('/auto_cmd_vel', 'geometry_msgs/Twist');
    pause(1) % Esperar a que se registren los canales
    cmdMsg = rosmessage(cmdPub);  
end
    

%% Definicion del robot (disco de diametro = 0.35m)
R = 0.072/2;                % Radio de las ruedas [m]
L = 0.235;                  % Distancia entre ruedas [m]
dd = DifferentialDrive(R,L); % creacion del Simulador de robot diferencial

%% Creacion del entorno
% load mapa_fiuba_1p.mat      %carga el mapa como occupancyMap en la variable 'map'
load mapa_lae.mat         %mapa viejo para probar cosas
% load otro_mapa_mas.mat

if verMatlab.Release=='(R2016b)'
    %Para versiones anteriores de MATLAB, puede ser necesario ajustar mapa
    imagen_mapa = 1-double(imread('imagen_mapa_viejo.tiff'))/255;
    map = robotics.OccupancyGrid(imagen_mapa, 25);
elseif verMatlab.Release=='(R2018a)'    % Completar con la version que tengan
    imagen_mapa = 1-double(imread('mapa_fiuba_1p.tiff'))/255;
%     imagen_mapa = 1-double(imread('imagen_mapa_viejo.tiff'))/255;
    map = robotics.OccupancyGrid(imagen_mapa, 25);
    disp('R2018b funciona');
else
    disp(['Utilizando MATLAB ', verMatlab.Release]);
end

%% Crear sensor lidar en simulador
lidar = LidarSensor;
lidar.sensorOffset = [0,0];     % Posicion del sensor en el robot (asumiendo mundo 2D)
scaleFactor = 3;                %decimar lecturas de lidar acelera el algoritmo
num_scans = round(513/scaleFactor);
hokuyo_step_a = deg2rad(-90);
hokuyo_step_c = deg2rad(90);

lidar.scanAngles = linspace(hokuyo_step_a,hokuyo_step_c,num_scans);
lidar.maxRange = 5; %[m]

%% Crear visualizacion
viz = Visualizer2D;
viz.mapName = 'map';
attachLidarSensor(viz,lidar);

%% Parametros de la Simulacion

simulationDuration = 10*60;     % Duracion total [s]
sampleTime = 0.1;                   % Sample time [s]
cantidad_particulas = 1000;
cteSumPesos = 1e+2;
% umbralLocazacion = 6e6;
umbralLocazacion = 1e5;
% Definimos un umbral de medicion de distancia para evitar actuar y evitar
% choque calculado para 1000 particulas
umbralDistanciaColision = 0.6;
% Declaramos una variable para detectar posible colisión
noColision = true;  
valMapa = false;
localizado =false;
% Datos del camino
buscarCamino=true;
intermedio1 = [8.22,6.18];
intermedio2 = [7.9,4.2];
objetivo1 = [5.3,4.3];
tolerancia = 0.01;
K = 0.1;
Kd = 0.05;
%  probar iniciar el robot en distintos lugares                                  
% initPose = [14; 7; deg2rad(225)];        
% initPose = [7; 10; deg2rad(90)];         
% initPose = [5; 4.2; deg2rad(90)]; 
% initPose = [9.5; 15; deg2rad(-90)];

% Poses posbibles en el 1erpiso
% initPose = [9.5; 10; deg2rad(180)];%funco
initPose = [9; 9; deg2rad(120)]; %funco
% initPose = [14; 7; deg2rad(225)]; %funco
% initPose = [9.5; 10; deg2rad(0)];%funco
% initPose = [9; 15; deg2rad(-120)];         

% Pose inicial para mapa viejo
% initPose = [5; 3; deg2rad(90)];
% initPose = [5; 3; deg2rad(-90)];
% Inicializar vectores de tiempo:
tVec = 0:sampleTime:simulationDuration;         % Vector de Tiempo para duracion total

%% generar comandos a modo de ejemplo
% Utilizaremos estos comandos para avanzar en linea recta cuando no hay obstaculos
% vxRef = 0.15*ones(size(tVec));   % Velocidad lineal a ser comandada
vxRef = 0.3*ones(size(tVec));   % Velocidad lineal a ser comandada
wRef = zeros(size(tVec));       % Velocidad angular a ser comandada
pose = zeros(3,numel(tVec));    % Inicializar matriz de pose
pose(:,1) = initPose;

%% Inicialización del Filtro de Partículas
% numParticles = 100;
% initialPose = [11; 20; deg2rad(0)];
% initialCovariance = diag([0.1, 0.1, deg2rad(5)].^2);

% Initialize particles
load('espacioLibre1piso.mat');
% particles = inicializarParticulas2(freeX,freeY,2500);

% particles = inicializarParticulas2(freeX,freeY,800);
particles = inicializarParticulas(freeX,freeY,cantidad_particulas);
%% Simulacion

if verMatlab.Release=='(R2018a)'
    r = robotics.Rate(1/sampleTime);    %matlab viejo no tiene funcion rateControl
else
    r = rateControl(1/sampleTime);  %definicion para R2020a, y posiblemente cualquier version nueva
end
k = 1;

for idx = 2:numel(tVec)   
    
    % Generar aqui criteriosamente velocidades lineales v_cmd y angulares w_cmd
    % -0.5 <= v_cmd <= 0.5 and -4.25 <= w_cmd <= 4.25
    % (mantener las velocidades bajas (v_cmd < 0.1) (w_cmd < 0.5) minimiza vibraciones y
    % mejora las mediciones.   
    
    %% COMPLETAR ACA por el alumnoa:
         % generar velocidades para este timestep
        
        % Si el flag de noColision es verdadero entonces avanzamos linealmente
        if (localizado == false && buscarCamino==true)
            if noColision
                v_cmd = vxRef(idx-1);
                w_cmd = wRef(idx-1); 
            else
            % Si se detecta colision se reduce la velocidad al 50% y se realiza
            % un giro relativamente suave multiplicado por el signo de giro que
            % se explica mas abajo
                v_cmd = 0.05;
            % Si se sube mucho w_cmd es menos suave la trayectoria
                w_cmd = 0.25*sign(giro);

            end
        end
        % fin del COMPLETAR ACA
    
    %% a partir de aca el robot real o el simulador ejecutan v_cmd y w_cmd:
    
    if use_roomba       % para usar con el robot real
        
        % Enviar comando de velocidad en el formato que pide el robot:
        cmdMsg.Linear.X = v_cmd;
        cmdMsg.Angular.Z = w_cmd;
        send(cmdPub,cmdMsg);
        
        % Recibir datos de lidar y odometrÃ­a
        scanMsg = receive(laserSub);
        odompose = odomSub.LatestMessage;
        
        % Obtener vector de distancias del lidar
        ranges_full = laserSub.LatestMessage.Ranges;
        ranges = double(ranges_full(1:scaleFactor:end));
        ranges(ranges==0)=NaN; % lecturas erroneas y maxrange
        
        % Se filtran mediciones debido a los dos parantes de la bandeja
        ranges(ranges < 0.2) = NaN; 

        % Obtener pose del robot [x,y,yaw] de datos de odometrÃ­a (integrado por encoders).
        odomQuat = [odompose.Pose.Pose.Orientation.W, odompose.Pose.Pose.Orientation.X, ...
        odompose.Pose.Pose.Orientation.Y, odompose.Pose.Pose.Orientation.Z];
        odomRotation = quat2eul(odomQuat);
        pose(:,idx) = [odompose.Pose.Pose.Position.X + initPose(1); odompose.Pose.Pose.Position.Y+ initPose(2); odomRotation(1)];
        
    else        % para usar el simulador
   
        % Mover el robot segun los comandos generados
        [wL,wR] = inverseKinematics(dd,v_cmd,w_cmd);
        % Velocidad resultante
        [v,w] = forwardKinematics(dd,wL,wR);
        velB = [v;0;w]; % velocidades en la terna del robot [vx;vy;w]
        vel = bodyToWorld(velB,pose(:,idx-1));  % Conversion de la terna del robot a la global
%         vx = vel(1);
%         vy = vel(2);
%         pfVelocities = [vx; vy; w];
        % Realizar un paso de integracion
        pose(:,idx) = pose(:,idx-1) + vel*sampleTime; 
        % Tomar nueva medicion del lidar
        ranges = double(lidar(pose(:,idx)));        
        % Se filtran las mediciones, debido a los dos parantes de la bandeja
        ranges(ranges < 0.2) = NaN; 
        if simular_ruido_lidar
            % Simular ruido de un lidar ruidoso (probar a ver si se la banca)
            chance_de_medicion_no_valida = 0.17;
            not_valid=rand(length(ranges),1);
            ranges(not_valid<=chance_de_medicion_no_valida)=NaN;
        end
        

    end
    
        % %         % Actualizar el filtro de partículas con las mediciones del LIDAR y la odometría
    if (localizado == false)
        new_particles = sample_motion_model(vel,sampleTime, particles);
        [weights,sumPesos ] = measurement_model(ranges, new_particles, map,lidar);
        if (sumPesos< cteSumPesos && valMapa == false)
            particles = inicializarParticulas(freeX,freeY,cantidad_particulas);
        else
            particles = resample(new_particles, weights);
%             no restringo con el signo del angulo pero cuando asigno el angulo de las particulas los normalizo a pi
            if(sumPesos >= umbralLocazacion && all(sign(mean(particles)') == sign(pose(:,idx))))
                valMapa = true;
                localizado = true;
                disp('ya me localice')
            end
        end
    elseif (localizado == true && buscarCamino==true)
        disp(mean(particles))
        disp( pose(:,idx))
%         Actualizo la pose con el valor de lozalizacion
        pose(:,idx) = mean(particles)';
        
%         voy desde la pose localizada del robot hasta punto intermedio
        path1 = planning_framework(pose(:,idx),intermedio1 );
%         Voy desde pose intermedia hasta la puerta del labo
        path2 = planning_framework(intermedio1,intermedio2 );
        path3 = planning_framework(intermedio2,objetivo1 );
        path = [path1;path2;path3];
        buscarCamino = false;
        
    end
    %%
    % Aca el robot ya ejecuta las velocidades comandadas y devuelve en la
    % variable ranges la medicion del lidar para ser usada y
    % en la variable pose(:,idx) la odometria actual.
    
    %% COMPLETAR ACA por el alumno:
    

    if (localizado == false && buscarCamino==true)
%         si no estoy localizado y sigo buscando camino optimo
        if any(ranges < umbralDistanciaColision)
            % Si alguno de los rayos es menor que el umbral de colisión entonces se
            % pone el flag de noColision en falso y se procede a actuar como sigue:
            disp('¡Pared detectada! Girando...')
            noColision = false; 

            promedioRangeDerecha = nanmean(ranges(1:int32(length(ranges)/2)));
            promedioRangeIzquierda = nanmean(ranges(int32(length(ranges)/2):end));
            if promedioRangeDerecha < promedioRangeIzquierda
                giro = 1; %w_cmd > 0 gira hacia la izquierda
            else
                giro = -1;%w_cmd > 0 gira hacia la derecha
            end   

        else

           disp('Camino Despejado Avanza tranquilo!')
    %        avanza en base al mapa, tomando la trayectoria definida

           noColision = true; 
        end    
    elseif(buscarCamino == false)
        disp('ya puedo empezar a recorrer la trayectoria')
%% PID 1
        
%         Con los comando de v y w que le pase va a actualizar la pose en simulacion
%         y en el robot lo va a mover
%         v_cmd = -0.3;
%         armo los comandos para que sigan la trayectori
%           pose(:,idx);
        
%        %calculo angulo objetivo con las coodenas dadas
%         eX = (path(k,1)- pose(1,idx));
%         eY = (path(k,2)- pose(2,idx));
%         anguloInicial = rad2deg(pose(3,idx));
%         anguloObjetivo = rad2deg(atan2(eY,eX));
% 
%         % Calcular la distancia en sentido horario y antihorario
%         distanciaHorario = mod(anguloObjetivo - anguloInicial, 360);
%         distanciaAntihorario = mod(anguloInicial - anguloObjetivo, 360);
% 
%         % Decidir en qué dirección girar
% %         if distanciaHorario < distanciaAntihorario
% %             fprintf('Girar en sentido horario por %f grados\n', distanciaHorario);
% %             giro = -1;%w_cmd > 0 gira hacia la derecha
% %     
% %         else
% %             fprintf('Girar en sentido antihorario por %f grados\n', distanciaAntihorario);
% %             giro = 1; %w_cmd > 0 gira hacia la izquierda
% %             
% %         end
% %         armo el pid
%         eTheta = anguloObjetivo - anguloInicial;
%         eTheta = deg2rad(eTheta);
%         eX_dot = eX/ sampleTime;
%         eY_dot = eY/ sampleTime;
%         eTheta_dot = eTheta / sampleTime;
% %         Ahora que ya tengo el angulo al que debe apuntar el robot, giro
%         v_cmd = K * sqrt(eX^2 + eY^2) - Kd * sqrt(eX_dot^2 + eY_dot^2);
%         w_cmd = K * eTheta - Kd * eTheta_dot;
%         % Si se sube mucho w_cmd es menos suave la trayectoria
% %         w_cmd = deg2rad(eTheta*K)*sign(giro)/sampleTime;
% %         w_cmd = (deg2rad(eTheta)*K)/sampleTime;
%         k = k+1;
% %         if abs(pose(3,idx-1)-anguloObjetivo)<= tolerancia        
% %         if abs(pose(3,idx)-anguloObjetivo)<= tolerancia
% %             disp('ya estoy apuntando donde queres')
% %             Avanzo linealmente
%% Pid 2
        eX = (path(k,1)- pose(1,idx));
        eY = (path(k,2)- pose(2,idx));
        eX_dot = eX/ sampleTime;
        eY_dot = eY/ sampleTime;
        anguloInicial = rad2deg(pose(3,idx));
        anguloObjetivo = rad2deg(atan2(eY,eX));
                % Calcular la distancia en sentido horario y antihorario
        distanciaHorario = mod(anguloObjetivo - anguloInicial, 360);
        distanciaAntihorario = mod(anguloInicial - anguloObjetivo, 360);
        
        % Decidir en qué dirección girar
%         if distanciaHorario < distanciaAntihorario
%             fprintf('Girar en sentido horario por %f grados\n', distanciaHorario);
%             giro = -1;%w_cmd > 0 gira hacia la derecha
%     
%         else
%             fprintf('Girar en sentido antihorario por %f grados\n', distanciaAntihorario);
%             giro = 1; %w_cmd > 0 gira hacia la izquierda
%         en radianes
      
        eTheta = anguloObjetivo - anguloInicial;
        eTheta = deg2rad(eTheta);
        eTheta_dot = eTheta / sampleTime;
        % Calcular el control PID de orientación
        w_cmd = K * eTheta% - Kd * eTheta_dot;
        if abs(w_cmd) > 0.5
            disp('error me fui de rosca')
        end
        v_cmd = 0;
        disp(eTheta)
        if abs(eTheta) < 0.01
            v_cmd = K * sqrt(eX^2 + eY^2)% - Kd * sqrt(eX_dot^2 + eY_dot^2);
             disp(eX)
             
            if abs(eX) < 0.01 && abs(eY) < 0.01
               
                k = k+1;
            end
        end
        

    end
        
    %%
    % actualizar visualizacion
    
    viz(pose(:,idx),ranges)
    
    hold on
    if (sumPesos> cteSumPesos)
        plot(particles(:, 1),particles(:, 2),'g.');
    end
    hold off
%     axis([-5 23 0 23]);
%     plot(new_particles(:, 1),new_particles(:, 2),'r.');
    
%     viz(pose(:,idx),pf.Particles); % Partículas en verde
%     filename = sprintf('plots/PoseInit(5_3_0)_mapaViejo_%03d.png', idx-1);
%     saveas(gcf,filename)
    waitfor(r);


end

